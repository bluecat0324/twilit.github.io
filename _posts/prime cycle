이 글에서는 모든 사람의 위치를 0-based(0부터 시작하는 인덱스)로 설명한다.

참고로, p[i]는 i번째 소수이고, n은 입력으로 주어지는 n이다.

우선, 한 라운드에서 각 사람이 얼마나 이동하는지를 관찰해보자.

0번째에 있는 사람:
0번째에 위치한 사람은 반시계 방향으로 p[i] % n번 이동한다.
0번째에 있지 않은 사람들:
이들은 n - 1번을 주기로, 1번, 2번, …, n - 1번, 0번, 1번 …의 순서로 시계 방향으로 이동한다.
즉, K번의 라운드 후에 어떤 사람 x의 최종 위치는 위의 이동 과정을 그대로 시뮬레이션하여 O(K) 시간복잡도 안에 계산할 수 있다.

이제, 인접한 사람 y와 z의 초기 위치는 어떻게 구할 수 있을지 고민해보자.

모든 사람은 시계 방향으로 이동할 때,(p[i] / (n - 1))번 이동하거나,
추가로 +1번 이동하거나,
또는 p[i] % n번 이동하는 경우가 있으므로,
이 세 가지 경우 중 어느 경우에 속하는지 잘 판단하여, 뒤에서부터 역으로 추적하면 근처 사람 y와 z의 초기 위치를 알아낼 수 있다.

'''cpp
#include <iostream>
#include <set>
#include <vector>
using namespace std;
using ld = long double;

int n, k, a;
bool so[5000099];
vector <int> pr;

int nx(int i, int w){
    if(w == 0) return pr[i] % n;
    int d = pr[i] / (n - 1);
    if(pr[i] % (n - 1) >= w) d ++;
    d %= n;
    return (w + n - d) % n;
}

int gp(int v){
    for(int i = k; i >= 1; i --){
        if(pr[i] % n == v) v = 0;
        else{
            int d = pr[i] / (n - 1);
            if(nx(i, (v + d) % n) == v) v = (v + d) % n;
            else v = (v + d + 1 + n) % n;
        }
    }
    return v;
}

int main()
{
    pr.push_back(0);
    for(int i = 2; i <= 5000000; i ++){
        if(so[i] == true) continue;
        pr.push_back(i);
        for(int j = i; j <= 5000000 / i; j ++){
            so[i * j] = true;
        }
    }
    scanf("%d %d %d", &n, &k, &a);
    int w = a - 1;
    for(int i = 1; i <= k; i ++){
        w = nx(i, w);
    }
    int l = (w + 1) % n, r = (w + n - 1) % n;

    printf("%d %d\n", gp(l) + 1, gp(r) + 1);
    return 0;
}
'''
